package com.example.bch__8_11.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bch__8_11.bean.ProductsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTS_BEAN".
*/
public class ProductsBeanDao extends AbstractDao<ProductsBean, Void> {

    public static final String TABLENAME = "PRODUCTS_BEAN";

    /**
     * Properties of entity ProductsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Msg = new Property(0, String.class, "msg", false, "MSG");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Page = new Property(2, String.class, "page", false, "PAGE");
    }


    public ProductsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ProductsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTS_BEAN\" (" + //
                "\"MSG\" TEXT NOT NULL ," + // 0: msg
                "\"CODE\" TEXT NOT NULL ," + // 1: code
                "\"PAGE\" TEXT NOT NULL );"); // 2: page
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductsBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMsg());
        stmt.bindString(2, entity.getCode());
        stmt.bindString(3, entity.getPage());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductsBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMsg());
        stmt.bindString(2, entity.getCode());
        stmt.bindString(3, entity.getPage());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ProductsBean readEntity(Cursor cursor, int offset) {
        ProductsBean entity = new ProductsBean( //
            cursor.getString(offset + 0), // msg
            cursor.getString(offset + 1), // code
            cursor.getString(offset + 2) // page
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductsBean entity, int offset) {
        entity.setMsg(cursor.getString(offset + 0));
        entity.setCode(cursor.getString(offset + 1));
        entity.setPage(cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ProductsBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ProductsBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ProductsBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
